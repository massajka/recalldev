from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
import json
from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0, openai_api_key=os.getenv("OPENAI_API_KEY"))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
PROGRESS_FILE = "user_progress.json"

def save_user_progress(user_id, data):
    try:
        with open(PROGRESS_FILE, "r") as f:
            all_data = json.load(f)
    except FileNotFoundError:
        all_data = {}
    all_data[str(user_id)] = data
    with open(PROGRESS_FILE, "w") as f:
        json.dump(all_data, f, indent=2, ensure_ascii=False)

def load_user_progress(user_id):
    try:
        with open(PROGRESS_FILE, "r") as f:
            all_data = json.load(f)
        return all_data.get(str(user_id), {})
    except FileNotFoundError:
        return {}

# –¢–ï–ú–´ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
topics = [
    "–û–û–ü",
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['topic_scores'] = {}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å–≤–µ–∂–∏—Ç—å –∑–Ω–∞–Ω–∏—è –ø–æ Python. –ù–∞—á–Ω—ë–º —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –û—Ü–µ–Ω–∏ —Å–≤–æ—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–µ–º–µ:"
    )
    await ask_next_topic(update, context)

# –ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async def ask_next_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = context.user_data['topic_scores']
    for topic in topics:
        if topic not in scores:
            keyboard = [
                [InlineKeyboardButton(f"{i}", callback_data=f"score|{i}|{topic}") for i in range(6)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"–û—Ü–µ–Ω–∏ —Å–≤–æ—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–º–µ: {topic}", reply_markup=reply_markup)
            return
    await suggest_learning_plan(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
async def handle_score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, score, topic = query.data.split("|")
    context.user_data['topic_scores'][topic] = int(score)
    await query.edit_message_text(f"{topic}: {score}/5")
    await ask_next_topic(query, context)

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
async def suggest_learning_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = context.user_data['topic_scores']
    sorted_scores = sorted(scores.items(), key=lambda x: x[1])
    diagnostics_str = "\n".join([f"{topic}: {score}/5" for topic, score in sorted_scores])

    prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º Python. –ï–≥–æ —Ü–µ–ª—å ‚Äî –æ—Å–≤–µ–∂–∏—Ç—å –∑–Ω–∞–Ω–∏—è, –∞ –Ω–µ –∏–∑—É—á–∞—Ç—å —Å –Ω—É–ª—è. –û–Ω —É–∂–µ –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –í–æ—Ç –µ–≥–æ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏:
{diagnostics_str}

–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ —É–≥–ª—É–±–ª—ë–Ω–Ω—ã—Ö, –Ω–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ —Ç–µ–º—ã. –ò–∑–±–µ–≥–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏—Ö —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º.

–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–º–µ—Å—Ç–æ:
- –ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü –≤—ã –∑–Ω–∞–µ—Ç–µ –∏ –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ Python?

–†–∞–∑–±–µ–π –Ω–∞:
- –ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü –≤—ã –∑–Ω–∞–µ—Ç–µ?
- –ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –∏ –∫–∞–∫ –æ–Ω–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ Python?
- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ Python?
- –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è?

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:  "–¢–µ–º–∞": ["–≤–æ–ø—Ä–æ—Å 1", "–≤–æ–ø—Ä–æ—Å 2"] 
"""
    
    response = llm([HumanMessage(content=prompt)])
    questions_by_topic = json.loads(response.content)

    context.user_data['question_plan'] = questions_by_topic
    context.user_data['question_list'] = [(topic, q) for topic, questions in questions_by_topic.items() for q in questions]
    context.user_data['current_q_index'] = 0

    await update.message.reply_text("üìä –û–±—É—á–∞—é—â–∏–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–ø–∏—à–∏ /go")

# –ö–æ–º–∞–Ω–¥–∞ /go –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_next_refresh_question(update, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_refresh_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_list = context.user_data.get('question_list', [])
    idx = context.user_data.get('current_q_index', 0)
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
    else:
        user_id = None  # –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É

    if idx >= len(q_list):
        await update.message.reply_text("‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return

    topic, question = q_list[idx]
    context.user_data['current_topic'] = topic
    context.user_data['current_question'] = question
    context.user_data['awaiting_answer'] = True

    await update.message.reply_text(f"üß† {topic}\n{question}\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")

    save_user_progress(user_id, context.user_data)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_answer'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    context.user_data['awaiting_answer'] = False

    topic = context.user_data.get('current_topic')
    question = context.user_data.get('current_question')
    answer = update.message.text

    prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{topic}':\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç, —É–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ –Ω–µ—Ç, –∏ –æ–±—ä—è—Å–Ω–∏ —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, –≤–∫–ª—é—á–∞—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –∏ best practices."
    response = llm([HumanMessage(content=prompt)])
    explanation = response.content

    context.user_data['last_explanation'] = explanation

    keyboard = [
        [
            InlineKeyboardButton("–û–±—Å—É–¥–∏—Ç—å", callback_data="discuss"),
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(explanation, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
async def handle_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['current_q_index'] += 1
    await send_next_refresh_question(query, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—Å—É–¥–∏—Ç—å"
async def handle_discuss(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    explanation = context.user_data.get('last_explanation', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.')
    await query.edit_message_text(f"üí¨ –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n{explanation}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_score, pattern="^score\\|"))
    app.add_handler(CallbackQueryHandler(handle_next, pattern="^next$"))
    app.add_handler(CallbackQueryHandler(handle_discuss, pattern="^discuss$"))
    app.add_handler(CommandHandler("go", go))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    print("Bot is running...")
    app.run_polling()
